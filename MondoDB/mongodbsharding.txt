
1. Installation von MongoDB:
   - `sudo apt update`
   `sudo apt install mongodb`



2. Konfiguration des MongoDB-Servers:
    `sudo nano /etc/mongodb.conf`
 Einfügen :
sharding:
  clusterRole: "configsvr"
replication:
  replSetName: "configReplSet"
   - Suche der Zeile "bindIp" und ändern  zu: `bindIp: 0.0.0.0`
   - SpeicherDatei und beende den Texteditor.



___________________________________________________________________________________________________________________________________________
Konfiguration der Firewall mit ufw:
Überprüfen ob Firewall PC aktiviert ist und ob der MongoDB-Port (standardmäßig 27017) zugelassen ist.
sicherstellen dass eingehende Verbindungen auf den Port erlaubt sind
Um Firewall-Konfiguration auf PC zu überprüfen und den MongoDB-Port (27017) zuzulassen, folgenden Schritte ausführen:

1. Überprüfen des Firewall-Status:
   `sudo ufw status`  um den Status der Firewall zu überprüfen. Wenn die Firewall aktiviert ist, eine Ausgabe ähnlich wie "Status: active" 

2. Überprüfen der vorhandenen Firewall-Regeln:
   `sudo ufw show added`  aktuell hinzugefügten Firewall-Regeln anzeigen. Suchen nach einer Regel, die den MongoDB-Port (standardmäßig 27017) betrifft.
 Wenn Regel vorhanden, bedeutet das der Port bereits zugelassen ist.

3. Hinzufügen einer Firewall-Regel für den MongoDB-Port:
   Wenn MongoDB-Port nicht zugelassen  Firewall-Regel hinzufügen, um eingehende Verbindungen auf Port zuzulassen.`sudo ufw allow 27017`, um den Port 27017 für eingehende Verbindungen zuzulassen

4. Überprüfen der aktualisierten Firewall-Regeln:
   Fü`sudo ufw show added` um aktualisierten Firewall-Regeln anzuzeigen. Sicher stellen dass Regel für MongoDB-Port (27017) vorhanden ist und der Zustand auf "ALLOW" gesetzt

5. Aktivieren der Firewall:
   Wenn Firewall deaktiviert,durch `sudo ufw enable` aktivieren. Dadurch werden die aktualisierten Firewall-Regeln angewendet.

-------------------------------------------------------------------------------------------------------------------------------------------
Wenn die UFW (Uncomplicated Firewall) auf PC nicht installiert  andere Firewall-Software verwenden, um Firewall-Konfiguration zu verwalten.
alternative Option iptables 
iptables zu verwenden um den MongoDB-Port zu öffnen:

1. Überprüfen des Status der Firewall:
   `sudo iptables -L`  um den Status der Firewall-Regeln anzuzeigen.
	Wenn iptables nicht installiert  mit dem Paketmanager installieren.

2. Öffnen des MongoDB-Ports:

   sudo iptables -A INPUT -p tcp --dport 27017 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT

   fügt eine Regel zur iptables-Konfiguration hinzu, die eingehenden TCP-Verkehr zum MongoDB-Port erlaubt.

3. Speichern der iptables-Konfiguration:
   Damit  iptables-Regeln gespeichert werden,folgenden Befehl ausführen:

   sudo iptables-save | sudo tee /etc/iptables/rules.v4

  aktuelle iptables-Regeln werden in die Datei `/etc/iptables/rules.v4` geschrieben.
__________________________________________________________________________________________________________________________________________





3. Starten des MongoDB-Servers:
   - `sudo service mongodb start`

4. Initialisierung des Sharding-Clusters:
   - Öffnen Sie ein neues Terminal auf Ihrem Server.
   - Starten Sie den MongoDB-Shell-Client mit dem Befehl: `mongo`

5. Konfiguration des Sharding-Clusters:
   - In der MongoDB-Shell folgenden Befehle um den Sharding-Cluster zu konfigurieren:

     use admin

     // Aktiviere Sharding für die gewünschte Datenbank (hier 'test' genannt)
     sh.enableSharding("test")

     // Erstellen einen Index für das Sharding
     db.test.createIndex({ "color": 1 })

     // Konfiguriere das Sharding für gewünschte Collection (hier 'data' genannt)
     sh.shardCollection("test.data", { "color": 1 })
     ```

6. Hinzufügen von Shards:
   - Füge Sharding-Cluster einzelne Shards hinzu, MongoDB-Cluster-Configuration-Server Shard-Informationen hinzufügen. In diesem Fall fügen wir drei Shards hinzu: "rot", "grün" und "blau".

     use config

     // Hinzufügen des "rot"-Shards
     sh.addShard("rot/localhost:27017")

     // Hinzufügen des "grün"-Shards
     sh.addShard("gruen/localhost:27017")

     // Hinzufügen des "blau"-Shards
     sh.addShard("blau/localhost:27017")
     ```

7. Überprüfung der Sharding-Konfiguration:
   - Überprüfe Status des Sharding-Clusters `sh.status()` in der MongoDB-Shell aus.

8. Daten schreiben:
   - Daten mit dem String "rot", "grün" oder "blau" in die MongoDB-Datenbank schreiben.
     Stelle sicher, dass das Dokument ein Feld "color" enthält und dieser Wert zur richtigen Shard-Gruppe gehört.
 MongoDB übernimmt die Verteilung automatisch basierend auf dem Shard-Schlüssel (in diesem Fall das Feld "color").

   Beispiel zum Schreiben von Daten mit "rot":

   use test

   // Schreibe ein Dokument mit dem String "rot"
   db.data.insert({ "color": "rot", "name": "Objekt 1" })
   ```

9. Überprüfung der Verteilung:
   - Überprüfe auf welchem Shard die Daten gespeichert sind`sh.status()` in der MongoDB-Shell ausführen.




































